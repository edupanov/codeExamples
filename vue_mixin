import { defineComponent } from 'vue';

const EMAIL_REGEX = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
const LOWER_CASE_REGEX = /(.*[a-z].*)/;
const UPPER_CASE_REGEX = /(.*[A-Z].*)/;
const LATIN_LETTER_REGEX = /^([A-Za-z\s]*)$/;
const ALLOWED_FILE_TYPES = ['image/png', 'image/jpeg', 'doc', 'heic', 'pdf'];

interface ValidationRulesInterface {
    [key: string]: any
}

export const validationMixin = defineComponent({
    computed: {
        validationRules(): any {
            return {
                name: {
                    rules: [
                        (value: string) => LATIN_LETTER_REGEX.test(value) ||
                            this.$t(
                                'validation.lettersOnly',
                                { field: this.$t('fields.name') }
                            ),
                        (value: string) => value.trim().length > 0 || this.$t('validation.empty'),
                    ]
                },
                surname: {
                    rules: [
                        (value: string) => LATIN_LETTER_REGEX.test(value) ||
                            this.$t(
                                'validation.lettersOnly',
                                { field: this.$t('fields.surname') }
                            ),
                        (value: string) => value.trim().length > 0 || this.$t('validation.empty'),
                    ]
                },
                userName: {
                    rules: [
                        (value: string) => value.length > 4 ||
                            this.$t(
                                'validation.length',
                                {
                                    field: this.$t('fields.userName'),
                                    length: 4,
                                }
                            ),
                    ]
                },
                email: {
                    rules: [
                        (value: string) => EMAIL_REGEX.test(value) ||
                            this.$t(
                                'validation.validity',
                                { field: this.$t('fields.email') }
                            ),
                    ]
                },
                phone: {
                    rules: [
                        (value: {number: string, isValid: boolean}) => value.isValid ||
                            this.$t(
                                'validation.validity',
                                { field: this.$t('fields.phone') }
                            ),
                        (value: {number: string, isValid: boolean}) => value.number.trim().length > 0 || this.$t('validation.empty'),
                    ]
                },
                password: {
                    rules: [
                        (value: string) => value.length > 11 ||
                            this.$t(
                                'validation.length',
                                {
                                    field: this.$t('fields.password'),
                                    length: 11,
                                }
                            ),
                        (value: string) => LOWER_CASE_REGEX.test(value) ||
                            this.$t(
                                'validation.lowerCaseRequired',
                                { field: this.$t('fields.password') }
                            ),
                        (value: string) => UPPER_CASE_REGEX.test(value) ||
                            this.$t(
                                'validation.upperCaseRequired',
                                { field: this.$t('fields.password') }
                            ),
                        (value: string) => LATIN_LETTER_REGEX.test(value) ||
                            this.$t(
                                'validation.lettersOnly',
                                { field: this.$t('fields.password') }
                            ),
                    ]
                },
                file: {
                    rules: [
                        (files: File) => ALLOWED_FILE_TYPES.includes(files.type) ||
                            this.$t(
                                'validation.extension',
                                { field: this.$t('fields.password') }
                            ),
                        (files: File) => files.size <= 10485760 || this.$t('validation.fileSize')
                    ],
                },
            };
        },
    },
    methods: {
        validateField(inputName: string, value: any) {
            const validationRules: ValidationRulesInterface = this.validationRules;
            const resultArray = validationRules[inputName].rules
                .filter((rule: (value: any) => boolean | string) => {
                    const isValid = rule(value);

                    return isValid !== true ? isValid : null;
                })
                .map((rule: (value: any) => boolean | string) => rule(value));

            return resultArray;
        },
    },

});
